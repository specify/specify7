# from django.apps import apps
# from django.core.exceptions import AppRegistryNotReady

# This needed to be move from specify.models to it's own module to avoid circular imports
model_names_by_table_id = {
    1: "Collectionobject",
    2: "Locality",
    3: "Geography",
    4: "Taxon",
    5: "Agent",
    6: "Permit",
    7: "Accession",
    8: "Address",
    9: "Determination",
    10: "Collectingevent",
    12: "Accessionagent",
    13: "Accessionauthorization",
    16: "Attributedef",
    17: "Author",
    18: "Borrow",
    19: "Borrowagent",
    20: "Borrowmaterial",
    21: "Borrowreturnmaterial",
    23: "Collection",
    25: "Collectingeventattr",
    26: "Discipline",
    28: "Collectionobjectattr",
    29: "Collectionobjectcitation",
    30: "Collector",
    31: "Container",
    32: "Paleocontext",
    33: "Datatype",
    34: "Disposal",
    35: "Disposalagent",
    36: "Disposalpreparation",
    38: "Determinationcitation",
    39: "Exchangein",
    40: "Exchangeout",
    41: "Attachment",
    42: "Attachmentmetadata",
    44: "Geographytreedef",
    45: "Geographytreedefitem",
    46: "Geologictimeperiod",
    47: "Geologictimeperiodtreedef",
    48: "Geologictimeperiodtreedefitem",
    49: "Groupperson",
    50: "Inforequest",
    51: "Journal",
    52: "Loan",
    53: "Loanagent",
    54: "Loanpreparation",
    55: "Loanreturnpreparation",
    57: "Localitycitation",
    58: "Storage",
    59: "Storagetreedef",
    60: "Storagetreedefitem",
    61: "Otheridentifier",
    63: "Preparation",
    64: "Preparationattr",
    65: "Preptype",
    66: "Project",
    67: "Appraisal",
    68: "Recordset",
    69: "Referencework",
    70: "Repositoryagreement",
    71: "Shipment",
    72: "Specifyuser",
    73: "Conservevent",
    75: "Taxoncitation",
    76: "Taxontreedef",
    77: "Taxontreedefitem",
    78: "Agentgeography",
    79: "Workbench",
    80: "Workbenchdataitem",
    81: "Workbenchtemplate",
    82: "Workbenchtemplatemappingitem",
    83: "Fieldnotebook",
    84: "Fieldnotebookpageset",
    85: "Fieldnotebookpage",
    86: "Agentspecialty",
    87: "Collectingtrip",
    88: "Dnasequencingrun",
    89: "Exsiccata",
    90: "Workbenchrow",
    91: "Preparationattribute",
    92: "Collectingeventattribute",
    93: "Collectionobjectattribute",
    94: "Institution",
    95: "Workbenchrowimage",
    96: "Division",
    97: "Autonumberingscheme",
    98: "Collectionreltype",
    99: "Collectionrelationship",
    100: "Lithostrat",
    101: "Lithostrattreedef",
    102: "Lithostrattreedefitem",
    103: "Conservdescription",
    104: "Exsiccataitem",
    105: "Dnasequencingruncitation",
    106: "Commonnametx",
    107: "Agentvariant",
    108: "Accessionattachment",
    109: "Agentattachment",
    110: "Collectingeventattachment",
    111: "Collectionobjectattachment",
    112: "Conservdescriptionattachment",
    113: "Conserveventattachment",
    114: "Loanattachment",
    115: "Localityattachment",
    116: "Permitattachment",
    117: "Preparationattachment",
    118: "Repositoryagreementattachment",
    119: "Taxonattachment",
    120: "Localitynamealias",
    121: "Dnasequence",
    122: "Treatmentevent",
    123: "Geocoorddetail",
    124: "Localitydetail",
    125: "Addressofrecord",
    126: "Workbenchrowexportedrelationship",
    127: "Fieldnotebookattachment",
    128: "Fieldnotebookpagesetattachment",
    129: "Fieldnotebookpageattachment",
    130: "Attachmenttag",
    131: "Gift",
    132: "Giftpreparation",
    133: "Giftagent",
    134: "Commonnametxcitation",
    135: "Dnasequencingrunattachment",
    136: "Latlonpolygon",
    137: "Latlonpolygonpnt",
    138: "Morphbankview",
    139: "Attachmentimageattribute",
    140: "Exchangeinprep",
    141: "Exchangeoutprep",
    142: "Institutionnetwork",
    143: "Referenceworkattachment",
    144: "Giftattachment",
    145: "Borrowattachment",
    146: "Fundingagent",
    147: "Dnasequenceattachment",
    148: "Storageattachment",
    149: "Treatmenteventattachment",
    150: "Dnaprimer",
    151: "Materialsample",
    152: "Collectingeventauthorization",
    153: "Collectionobjectproperty",
    154: "Preparationproperty",
    155: "Voucherrelationship",
    156: "Collectingtripattachment",
    157: "Collectingtripattribute",
    158: "Collectingtripauthorization",
    159: "Accessioncitation",
    160: "Extractor",
    161: "Pcrperson",
    162: "Taxonattribute",
    163: "Deaccession",
    164: "Deaccessionagent",
    165: "Deaccessionattachment",
    166: "Disposalattachment",
    167: "Determiner",
    168: "Agentidentifier",
    169: "Exchangeinattachment",
    170: "Exchangeoutattachment",
    500: "Picklist",
    501: "Picklistitem",
    502: "Recordsetitem",
    503: "Splocalecontainer",
    504: "Splocalecontaineritem",
    505: "Splocaleitemstr",
    513: "Spviewsetobj",
    514: "Spappresource",
    515: "Spappresourcedata",
    516: "Spappresourcedir",
    517: "Spquery",
    518: "Spqueryfield",
    519: "Spreport",
    520: "Spfieldvaluedefault",
    521: "Sppermission",
    522: "Spprincipal",
    524: "Spexportschema",
    525: "Spexportschemaitem",
    526: "Sptasksemaphore",
    527: "Spexportschemaitemmapping",
    528: "Spexportschemamapping",
    529: "Spversion",
    530: "Spauditlog",
    531: "Spauditlogfield",
    532: "Spvisualquery",
    533: "Spsymbiotainstance",
    1000: "Spuserexternalid",
    1001: "Spattachmentdataset",
    1002: "UniquenessRule",
    1003: "UniquenessRuleField",
    1004: "Message",
    1005: "Spmerging",
    1006: "UserPolicy",
    1007: "Role",
    1008: "LibraryRole",
    1009: "UserRole",
    1010: "RolePolicy",
    1011: "LibraryRolePolicy",
    1012: "Spdataset",
    1013: "LocalityUpdate",
    1014: "LocalityUpdateRowResult",
    1015: "Collectionobjecttype",
    1016: "Collectionobjectgroup",
    1017: "Collectionobjectgroupjoin",
    1018: "Collectionobjectgrouptype",
    1019: "Absoluteage",
    1020: "Relativeage",
    1021: "Absoluteageattachment",
    1022: "Relativeageattachment",
    1023: "Absoluteagecitation",
    1024: "Relativeagecitation",
    1025: "Tectonicunittreedef",
    1026: "Tectonicunittreedefitem",
    1027: "Tectonicunit",
    1028: "Spdatasetattachment",
}

model_names_by_app = {
    'accounts': {
        'Spuserexternalid'
    },
    'attachment_gw': {
        'Spattachmentdataset'
    },
    'businessrules': {
        'UniquenessRule',
        'UniquenessRuleField'
    },
    'notifications': {
        'Message',
        'Spmerging',
        'LocalityUpdate',
        'LocalityUpdateRowResult'
    },
    'permissions': {
        'UserPolicy',
        'Role',
        'LibraryRole',
        'UserRole',
        'RolePolicy',
        'LibraryRolePolicy'
    },
    'workbench': {
        'Spdataset',
        'Spdatasetattachment'
    },
    'specify': {
        'Accession',
        'Accessionagent',
        'Accessionattachment',
        'Accessionauthorization',
        'Accessioncitation',
        'Address',
        'Addressofrecord',
        'Agent',
        'Agentattachment',
        'Agentgeography',
        'Agentidentifier',
        'Agentspecialty',
        'Agentvariant',
        'Appraisal',
        'Attachment',
        'Attachmentimageattribute',
        'Attachmentmetadata',
        'Attachmenttag',
        'Attributedef',
        'Author',
        'Autonumberingscheme',
        'Borrow',
        'Borrowagent',
        'Borrowattachment',
        'Borrowmaterial',
        'Borrowreturnmaterial',
        'Collectingevent',
        'Collectingeventattachment',
        'Collectingeventattr',
        'Collectingeventattribute',
        'Collectingeventauthorization',
        'Collectingtrip',
        'Collectingtripattachment',
        'Collectingtripattribute',
        'Collectingtripauthorization',
        'Collection',
        'Collectionobject',
        'Collectionobjectattachment',
        'Collectionobjectattr',
        'Collectionobjectattribute',
        'Collectionobjectcitation',
        'Collectionobjectproperty',
        'Collectionreltype',
        'Collectionrelationship',
        'Collector',
        'Commonnametx',
        'Commonnametxcitation',
        'Conservdescription',
        'Conservdescriptionattachment',
        'Conservevent',
        'Conserveventattachment',
        'Container',
        'Dnaprimer',
        'Dnasequence',
        'Dnasequenceattachment',
        'Dnasequencingrun',
        'Dnasequencingrunattachment',
        'Dnasequencingruncitation',
        'Datatype',
        'Deaccession',
        'Deaccessionagent',
        'Deaccessionattachment',
        'Determination',
        'Determinationcitation',
        'Determiner',
        'Discipline',
        'Disposal',
        'Disposalagent',
        'Disposalattachment',
        'Disposalpreparation',
        'Division',
        'Exchangein',
        'Exchangeinattachment',
        'Exchangeinprep',
        'Exchangeout',
        'Exchangeoutattachment',
        'Exchangeoutprep',
        'Exsiccata',
        'Exsiccataitem',
        'Extractor',
        'Fieldnotebook',
        'Fieldnotebookattachment',
        'Fieldnotebookpage',
        'Fieldnotebookpageattachment',
        'Fieldnotebookpageset',
        'Fieldnotebookpagesetattachment',
        'Fundingagent',
        'Geocoorddetail',
        'Geography',
        'Geographytreedef',
        'Geographytreedefitem',
        'Geologictimeperiod',
        'Geologictimeperiodtreedef',
        'Geologictimeperiodtreedefitem',
        'Gift',
        'Giftagent',
        'Giftattachment',
        'Giftpreparation',
        'Groupperson',
        'Inforequest',
        'Institution',
        'Institutionnetwork',
        'Journal',
        'Latlonpolygon',
        'Latlonpolygonpnt',
        'Lithostrat',
        'Lithostrattreedef',
        'Lithostrattreedefitem',
        'Loan',
        'Loanagent',
        'Loanattachment',
        'Loanpreparation',
        'Loanreturnpreparation',
        'Locality',
        'Localityattachment',
        'Localitycitation',
        'Localitydetail',
        'Localitynamealias',
        'Materialsample',
        'Morphbankview',
        'Otheridentifier',
        'Paleocontext',
        'Pcrperson',
        'Permit',
        'Permitattachment',
        'Picklist',
        'Picklistitem',
        'Preptype',
        'Preparation',
        'Preparationattachment',
        'Preparationattr',
        'Preparationattribute',
        'Preparationproperty',
        'Project',
        'Recordset',
        'Recordsetitem',
        'Referencework',
        'Referenceworkattachment',
        'Repositoryagreement',
        'Repositoryagreementattachment',
        'Shipment',
        'Spappresource',
        'Spappresourcedata',
        'Spappresourcedir',
        'Spauditlog',
        'Spauditlogfield',
        'Spexportschema',
        'Spexportschemaitem',
        'Spexportschemaitemmapping',
        'Spexportschemamapping',
        'Spfieldvaluedefault',
        'Splocalecontainer',
        'Splocalecontaineritem',
        'Splocaleitemstr',
        'Sppermission',
        'Spprincipal',
        'Spquery',
        'Spqueryfield',
        'Spreport',
        'Spsymbiotainstance',
        'Sptasksemaphore',
        'Spversion',
        'Spviewsetobj',
        'Spvisualquery',
        'Specifyuser',
        'Storage',
        'Storageattachment',
        'Storagetreedef',
        'Storagetreedefitem',
        'Taxon',
        'Taxonattachment',
        'Taxonattribute',
        'Taxoncitation',
        'Taxontreedef',
        'Taxontreedefitem',
        'Treatmentevent',
        'Treatmenteventattachment',
        'Voucherrelationship',
        'Workbench',
        'Workbenchdataitem',
        'Workbenchrow',
        'Workbenchrowexportedrelationship',
        'Workbenchrowimage',
        'Workbenchtemplate',
        'Workbenchtemplatemappingitem',
        'Collectionobjecttype',
        'Collectionobjectgroup',
        'Collectionobjectgroupjoin',
        'Collectionobjectgrouptype',
        'Absoluteage', 
        'Relativeage', 
        'Absoluteageattachment',
        'Relativeageattachment', 
        'Absoluteagecitation', 
        'Relativeagecitation',
        'Tectonicunittreedef',
        'Tectonicunittreedefitem',
        'Tectonicunit', 
    }
}

# def import_model(model_name):
#     try:
#         for app in apps.get_app_configs():
#             if model_name in [m.__name__ for m in app.get_models()]:
#                 return apps.get_model(app.name, model_name)
#     except AppRegistryNotReady:
#         for app_name, model_names in model_names_by_app.items():
#             if model_name in model_names:
#                 def get_model():
#                     from importlib import import_module
#                     module = import_module(f"specifyweb.{app_name}.models")
#                     return getattr(module, model_name)
#                 return get_model
#     raise ValueError(f"Model {model_name} not found in any app")

def import_model(model_name):
    for app_name, model_names in model_names_by_app.items():
        if model_name in model_names:
            def get_model():
                from importlib import import_module
                if app_name in ['accounts', 'permissions', 'attachment_gw', 'barvis', 'raven_placeholder', 'notifications', 'express_search', 'hibernateboolsbackend', 'stats', 'interactions', 'report_runner', 'export', 'businessrules', 'patches', 'stored_queries', 'workbench', 'context']:
                    module = import_module(f"specifyweb.backend.{app_name}.models")
                else:
                    module = import_module(f"specifyweb.{app_name}.models")
                return getattr(module, model_name)
            return get_model
    raise ValueError(f"Model {model_name} not found in any app")

def get_model_by_table_id(tableid):
    model_name = model_names_by_table_id.get(tableid)
    model = import_model(model_name)
    if callable(model):
        model = model()
    return model
    
def get_table_id_by_model_name(model_name):
    for tableid, name in model_names_by_table_id.items():
        if name == model_name:
            return tableid
    raise ValueError(f"Model {model_name} not found in model_names_by_table_id")

def models_iterator():
    for tableid, _ in model_names_by_table_id.items():
        model = get_model_by_table_id(tableid)
        yield model