import logging

from specifyweb.backend.accounts import models as acccounts_models
from specifyweb.backend.attachment_gw import models as attachment_gw_models
from specifyweb.backend.businessrules import models as businessrules_models
from specifyweb.backend.context import models as context_models
from specifyweb.backend.notifications import models as notifications_models
from specifyweb.backend.permissions import models as permissions_models
from specifyweb.backend.interactions import models as interactions_models
from specifyweb.backend.workbench import models as workbench_models
from specifyweb.specify import models as spmodels
from specifyweb.backend.businessrules.exceptions import BusinessRuleException

logger = logging.getLogger(__name__)

APP_MODELS = [spmodels, acccounts_models, attachment_gw_models, businessrules_models, context_models,
              notifications_models, permissions_models, interactions_models, workbench_models]

def get_app_model(model_name: str):
    for app in APP_MODELS:
        if hasattr(app, model_name):
            return getattr(app, model_name)
    return None

def get_spmodel_class(model_name: str):
    try:
        return getattr(spmodels, model_name.capitalize())
    except AttributeError:
        pass
    # Iterate over all attributes in the models module
    for attr_name in dir(spmodels):
        # Check if the attribute name matches the model name case-insensitively
        if attr_name.lower() == model_name.lower():
            return getattr(spmodels, attr_name)
    raise AttributeError(f"Model '{model_name}' not found in models module.")

def log_sqlalchemy_query(query):
    # Call this function to debug the raw SQL query generated by SQLAlchemy
    from sqlalchemy.dialects import mysql
    compiled_query = query.statement.compile(dialect=mysql.dialect(), compile_kwargs={"literal_binds": True})
    raw_sql = str(compiled_query).replace('\n', ' ') + ';'
    logger.debug('='.join(['' for _ in range(80)]))
    logger.debug(raw_sql)
    logger.debug('='.join(['' for _ in range(80)]))
    # Run in the storred_queries.execute file, in the execute function, right before the return statement, line 546
    # from specifyweb.specify.utils import log_sqlalchemy_query; log_sqlalchemy_query(query)

def create_default_collection_types(apps):
    Collection = apps.get_model('specify', 'Collection')
    Collectionobject = apps.get_model('specify', 'Collectionobject')
    Collectionobjecttype = apps.get_model('specify', 'Collectionobjecttype')
    code_set = set(Collection.objects.all().values_list('code', flat=True))

    # Create default collection types for each collection, named after the discipline
    for collection in Collection.objects.all():
        discipline = collection.discipline
        discipline_name = discipline.name
        cot, created = Collectionobjecttype.objects.get_or_create(
            name=discipline_name,
            collection=collection,
            taxontreedef_id=discipline.taxontreedef_id
        )

        # Update CollectionObjects' collectionobjecttype for the discipline
        Collectionobject.objects.filter(collection=collection).update(collectionobjecttype=cot)
        collection.collectionobjecttype = cot
        try:
            collection.save()
        except BusinessRuleException as e:
            if 'Collection must have unique code in discipline' in str(e):
                # May want to do something besides numbering, but users can edit if after the migrqation if they want.
                i = 1
                while True:
                    collection.code = f'{collection.code}-{i}'
                    i += 1
                    if collection.code not in code_set:
                        code_set.add(collection.code)
                        break
                try:
                    collection.save()
                except BusinessRuleException as e:
                    logger.warning(f'Problem saving collection {collection}: {e}')
            continue


def get_picklists(collection: spmodels.Collection, tablename: str, fieldname: str):
    schema_items = spmodels.Splocalecontaineritem.objects.filter(
        container__discipline=collection.discipline,
        container__schematype=0,
        container__name=tablename.lower(),
        name=fieldname.lower(),
    )

    schemaitem = schema_items and schema_items[0]
    picklists = None
    if len(schema_items) > 0 and schema_items[0].picklistname:
        picklists = spmodels.Picklist.objects.filter(name=schema_items[0].picklistname)
        collection_picklists = picklists.filter(collection=collection)
        if len(collection_picklists) > 0:
            picklists = collection_picklists

    return picklists, schemaitem