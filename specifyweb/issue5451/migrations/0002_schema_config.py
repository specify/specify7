# Generated by Django 3.2.15 on 2024-12-27 18:59

from django.db import migrations

from specifyweb.businessrules.uniqueness_rules import create_uniqueness_rule

from specifyweb.specify.migration_utils.update_schema_config import update_table_schema_config_with_defaults, update_table_field_schema_config_with_defaults, revert_table_schema_config, revert_table_field_schema_config

UNIQUE_RULES = (
    ('Issue5451Test', ('text1',), ('collectionObject__collection',)),
    ('Issue5451Test', ('name',), ('collectionObject',)),
    ('Collectionobject', ('issue5451',), ('collection',)),
    ('Collectionobject', ('text1', 'issue5451'), ('collection',))
)


def apply_migration(apps, schema_editor):
    Discipline = apps.get_model('specify', 'Discipline')

    for discipline in Discipline.objects.all():
        update_table_schema_config_with_defaults(
            'Issue5451Test', discipline.id, None, apps)
        update_table_field_schema_config_with_defaults(
            'Collectionobject', discipline.id, 'issue5451', apps)
        for rule in UNIQUE_RULES:
            table, fields, scopes = rule
            create_uniqueness_rule(
                table, discipline, is_database_constraint=False, fields=fields, scopes=scopes, registry=apps)


def revert_migration(apps, schema_editor):
    revert_table_schema_config('Issue5451Test', apps)
    revert_table_field_schema_config('Collectionobject', 'issue5451', apps)

    UniquenessRule = apps.get_model('businessrules', 'UniquenessRule')
    UniquenessRuleField = apps.get_model(
        'businessrules', 'UniquenessRuleField')
    to_remove = set()
    for rule in UNIQUE_RULES:
        model, fields, scopes = rule
        for field in fields:
            found_fields = UniquenessRuleField.objects.filter(
                uniquenessrule__modelName=model, uniquenessrule__isDatabaseConstraint=False, fieldPath=field, isScope=False)
            to_remove.update(
                tuple(found_fields.values_list('uniquenessrule_id', flat=True)))
        for scope in scopes:
            found_scopes = UniquenessRuleField.objects.filter(
                uniquenessrule__modelName=model, uniquenessrule__isDatabaseConstraint=False, fieldPath=scope, isScope=True)
            to_remove &= set(
                (found_scopes.values_list('uniquenessrule_id', flat=True)))
        UniquenessRuleField.objects.filter(
            uniquenessrule_id__in=to_remove).delete()
        UniquenessRule.objects.filter(id__in=to_remove).delete()


class Migration(migrations.Migration):
    dependencies = [
        ('issue5451', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(apply_migration, revert_migration, atomic=True)
    ]
